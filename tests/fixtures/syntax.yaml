##\
# YAML handler fixtures for testing accepted syntax and data types.
#
# This file is a part of the "common classes package", utilised by a number of
# packages and projects, including CIDRAM and phpMussel.
# Source: https://github.com/Maikuolan/Common
##/

Deep outermost:
 Deep outer:
  Deep inner:
   Deep innermost: "Thus, from here, within this variable, a value is inserted"
String foo: "Bar"
Integer foo: 1234
Float foo: 123.4
Example implicit numeric array:
 - "Bar0"
 - "Bar1"
 - "Bar2"
 - "Bar3"
Example explicit numeric array:
 0: "Bar0"
 1: "Bar1"
 2: "Bar2"
 3: "Bar3"
Example associative array:
 Foo1: "Bar1"
 Foo2: "Bar2"
 Foo3: "Bar3"
 Foo4: "Bar4"
Example null set:
 ? "Bar0"
 ? "Bar1"
 ? "Bar2"
 ? "Bar3"
Example mixed multi-dimensional array:
 - "Bar0"
 - "Bar1"
 2: "Bar2"
 3: "Bar3"
 xFooX: "xBarX"
 Some int: 4567
 Sub array:
  Hello: "World"
  Sub-sub array:
   Foobar: "Barfoo"
Multi-line example: |
 h e l l o - w o r l d
 hello-world
Folded multi-line example: >
 Hello
 world.
 This
 is
 an
 example.
Example booleans and null:
 This is true: true
 This is also true: +
 This is false: false
 This is also false: -
 This is null: null
 This is also null: ~
Testing anchors:
 Anchored text push: &TestAnchor "Some placeholder text."
 Anchored text pull: *TestAnchor
Escaping test:
 - "They said, \"Our number is \#123-456-789\"."
 - "こんにちは世界。 \xE3\x81\x93\xE3\x82\x93\xE3\x81\xAB\xE3\x81\xA1\xE3\x81\xAF\xE4\xB8\x96\xE7\x95\x8C\xE3\x80\x82 \u3053\u3093\u306B\u3061\u306F\u4E16\u754C\u3002 \U00003053\U00003093\U0000306B\U00003061\U0000306F\U00004E16\U0000754C\U00003002"
 - "مرحبا بالعالم. \xD9\x85\xD8\xB1\xD8\xAD\xD8\xA8\xD8\xA7 \xD8\xA8\xD8\xA7\xD9\x84\xD8\xB9\xD8\xA7\xD9\x84\xD9\x85."
 - "你好世界。 \xE4\xBD\xA0\xE5\xA5\xBD\xE4\xB8\x96\xE7\x95\x8C\xE3\x80\x82 \u4F60\u597D\u4E16\u754C\u3002 \U00004F60\U0000597D\U00004E16\U0000754C\U00003002"
Inserts test: "Hello world; {{Deep outermost.Deep outer.Deep inner.Deep innermost}}; It should work, hopefully."
Inline array example: [this, is, a, test., "Foo", "Bar", true, false, 123]
Hexadecimal number notation: 0x10000
Binary number notation: 0b10000
Octal number notation: 0o10000
Example explicit tags (type coercion):
 Normal string: &NormalString "123 Hello"
 Make the string a bool: !!bool "123 Hello"
 Make the string a float: !!float "123 Hello"
 Make the string a null set: !!set "123 Hello"
 Make the string a null: !!null "123 Hello"
 Make the string a numeric array: !!seq "123 Hello"
 Make the string an integer: !!int "123 Hello"
 Make the string an integer from an anchor: !!int *NormalString
 Normal integer: &NormalInteger 12345
 Make the integer a bool: !!bool 12345
 Make the integer a float: !!float 12345
 Make the integer a null set: !!set 12345
 Make the integer a null: !!null 12345
 Make the integer a numeric array: !!seq 12345
 Make the integer a string: !!str 12345
 Make the integer a string from an anchor: !!str *NormalInteger
 Normal float: &NormalFloat 123.456
 Make the float a bool: !!bool 123.456
 Make the float a null: !!null 123.456
 Make the float a string: !!str 123.456
 Make the float an integer: !!int 123.456
 Make the float an integer from an anchor: !!int *NormalFloat
 Normal array: &NormalArray ["Foo", "Bar", 1]
 Make the array a bool: !!bool ["Foo", "Bar", 1]
 Make the array a float: !!float ["Foo", "Bar", 1]
 Make the array a null set: !!set ["Foo", "Bar", 1]
 Make the array a null: !!null ["Foo", "Bar", 1]
 Make the array a numeric array: !!seq ["Foo", "Bar", 1]
 Make the array an integer: !!int ["Foo", "Bar", 1]
 Make the array an integer from an anchor: !!int *NormalArray
 To bool:
  - !!bool "0"
  - !!bool "1"
  - !!bool "Hello"
  - !!bool "fAlSe"
  - !!bool "false"
  - !!bool "tRuE"
  - !!bool "true"
  - !!bool 0
  - !!bool 1
  - !!bool null
 To int:
  - !!int "0"
  - !!int "1"
  - !!int "Hello"
  - !!int false
  - !!int null
  - !!int true
 To string:
  - !!str null
  - !!str true
  - !!str false
Binary single-line example: !!binary SGVsbG8gd29ybGQhIDotKQ==
Binary multi-line example: !!binary |
 TG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdCw
 gc2VkIGRvIGVpdXNtb2QgdGVtcG9yIGluY2lkaWR1bnQgdXQgbGFib3JlIGV0IGRvbG9yZSBtYW
 duYSBhbGlxdWEu
Make an array a null set: !!set
 Foo: "Bar"
 Foz: "Baz"
 Far: "Boo"
Make an array a sequential (numeric): !!seq
 Foo: "Bar"
 Foz: "Baz"
 Far: "Boo"
End of file: ":-)"
